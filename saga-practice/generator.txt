함수 실행을 중간에 멈출 수 있는 함수임.
(사용자가 원할 때 재개 가능.)

function* generator(){
    console.log(1);
    console.log(1);
    console.log(1);
}
const gfunc = generator();
gfunc;
하면
generator {<suspended>} 이거나옴 -> suspended:종료아직안됐다.
generator().next();해야 돌아감.

이후 아래 하면 closed됨.
gfunc
generator {<closed>}

순수 제너레이터 실행했을 때 바로 내부가 실행되는게 아니라 next() 한번 해줘야 안의 내용들 실행됨.
next()는 여러번 사용 가능 (closed 되기 전까지.)

제너테이터는 함수 만들고 사용자 원할 때 재개하고 중단 가능(재개는 next()로 재개.)

yield;가 중단점임.

제너레이터 일단 실행해서 변수에 넣어주자.
ex) const a = generator();
a.next()로 시작함
만약 여기서 함수의 끝이 아니라면 {value: undefined, done: false} 이렇게 done 부분이 false임. 완료되면 true

yield에 값을 넣어주면?
실행은 같은데 
{value: 5, done: false} 이런식으로 value가 들어감.

중단점 여러개 넣어두기도 가능.

yield* 도 있음
yield* '12345' 이 뒤의 값을 iterable로 처리하겠다.(반복 가능 값.) 대표적으로 배열. (next() 거쳐가며)

generator나온 이유?
async/await 이 2017년에 표준이 됨.
2015년~2016년은 es6들어온 뒤 2년간 async/await 없어서 Promise랑 비동기 제어하는데 어려웠음.

yield를 await같이 썼음.

yield가 async/await보다 기능이 더 강력함.
제너레이터의 경우 원할 때 멈출 수 있고 원할 때 재개 가능하기에 이는 곧 비동기를 자유자재로 컨트롤 할 수 있다는 말임.
redux-saga가 async/await 나왔음에도 제너레이터 쓰는 이유가 바로 여기에 있음.(할수있는게 더 많아서.)

function* generator(){
    let i = 0;
    while(true){
        yield i++;
    }
}
그래서 이런 코드가 가능(고장안나고).

